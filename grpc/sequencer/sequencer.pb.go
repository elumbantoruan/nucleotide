// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sequencer.proto

package sequencer

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Nucleotide struct {
	Input                int32    `protobuf:"varint,1,opt,name=input,proto3" json:"input,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nucleotide) Reset()         { *m = Nucleotide{} }
func (m *Nucleotide) String() string { return proto.CompactTextString(m) }
func (*Nucleotide) ProtoMessage()    {}
func (*Nucleotide) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4c964fbd7973d0, []int{0}
}

func (m *Nucleotide) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nucleotide.Unmarshal(m, b)
}
func (m *Nucleotide) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nucleotide.Marshal(b, m, deterministic)
}
func (m *Nucleotide) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nucleotide.Merge(m, src)
}
func (m *Nucleotide) XXX_Size() int {
	return xxx_messageInfo_Nucleotide.Size(m)
}
func (m *Nucleotide) XXX_DiscardUnknown() {
	xxx_messageInfo_Nucleotide.DiscardUnknown(m)
}

var xxx_messageInfo_Nucleotide proto.InternalMessageInfo

func (m *Nucleotide) GetInput() int32 {
	if m != nil {
		return m.Input
	}
	return 0
}

type Sequence struct {
	Output               []string `protobuf:"bytes,1,rep,name=output,proto3" json:"output,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Sequence) Reset()         { *m = Sequence{} }
func (m *Sequence) String() string { return proto.CompactTextString(m) }
func (*Sequence) ProtoMessage()    {}
func (*Sequence) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4c964fbd7973d0, []int{1}
}

func (m *Sequence) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sequence.Unmarshal(m, b)
}
func (m *Sequence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sequence.Marshal(b, m, deterministic)
}
func (m *Sequence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sequence.Merge(m, src)
}
func (m *Sequence) XXX_Size() int {
	return xxx_messageInfo_Sequence.Size(m)
}
func (m *Sequence) XXX_DiscardUnknown() {
	xxx_messageInfo_Sequence.DiscardUnknown(m)
}

var xxx_messageInfo_Sequence proto.InternalMessageInfo

func (m *Sequence) GetOutput() []string {
	if m != nil {
		return m.Output
	}
	return nil
}

func init() {
	proto.RegisterType((*Nucleotide)(nil), "sequencer.Nucleotide")
	proto.RegisterType((*Sequence)(nil), "sequencer.Sequence")
}

func init() { proto.RegisterFile("sequencer.proto", fileDescriptor_1e4c964fbd7973d0) }

var fileDescriptor_1e4c964fbd7973d0 = []byte{
	// 136 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x4e, 0x2d, 0x2c,
	0x4d, 0xcd, 0x4b, 0x4e, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x28,
	0x29, 0x71, 0x71, 0xf9, 0x95, 0x26, 0xe7, 0xa4, 0xe6, 0x97, 0x64, 0xa6, 0xa4, 0x0a, 0x89, 0x70,
	0xb1, 0x66, 0xe6, 0x15, 0x94, 0x96, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0x41, 0x38, 0x4a,
	0x4a, 0x5c, 0x1c, 0xc1, 0x50, 0x0d, 0x42, 0x62, 0x5c, 0x6c, 0xf9, 0xa5, 0x25, 0x10, 0x25, 0xcc,
	0x1a, 0x9c, 0x41, 0x50, 0x9e, 0x91, 0x33, 0x17, 0x27, 0x4c, 0x4d, 0x91, 0x90, 0x19, 0x17, 0x8b,
	0x5f, 0x6a, 0x45, 0x89, 0x90, 0xa8, 0x1e, 0xc2, 0x66, 0x84, 0x2d, 0x52, 0xc2, 0x48, 0xc2, 0x30,
	0x4d, 0x4a, 0x0c, 0x1a, 0x8c, 0x49, 0x6c, 0x60, 0xe7, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xaf, 0x5e, 0x8f, 0xb5, 0xb1, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SequencerClient is the client API for Sequencer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SequencerClient interface {
	Next(ctx context.Context, opts ...grpc.CallOption) (Sequencer_NextClient, error)
}

type sequencerClient struct {
	cc *grpc.ClientConn
}

func NewSequencerClient(cc *grpc.ClientConn) SequencerClient {
	return &sequencerClient{cc}
}

func (c *sequencerClient) Next(ctx context.Context, opts ...grpc.CallOption) (Sequencer_NextClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Sequencer_serviceDesc.Streams[0], "/sequencer.Sequencer/Next", opts...)
	if err != nil {
		return nil, err
	}
	x := &sequencerNextClient{stream}
	return x, nil
}

type Sequencer_NextClient interface {
	Send(*Nucleotide) error
	CloseAndRecv() (*Sequence, error)
	grpc.ClientStream
}

type sequencerNextClient struct {
	grpc.ClientStream
}

func (x *sequencerNextClient) Send(m *Nucleotide) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sequencerNextClient) CloseAndRecv() (*Sequence, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Sequence)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SequencerServer is the server API for Sequencer service.
type SequencerServer interface {
	Next(Sequencer_NextServer) error
}

func RegisterSequencerServer(s *grpc.Server, srv SequencerServer) {
	s.RegisterService(&_Sequencer_serviceDesc, srv)
}

func _Sequencer_Next_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SequencerServer).Next(&sequencerNextServer{stream})
}

type Sequencer_NextServer interface {
	SendAndClose(*Sequence) error
	Recv() (*Nucleotide, error)
	grpc.ServerStream
}

type sequencerNextServer struct {
	grpc.ServerStream
}

func (x *sequencerNextServer) SendAndClose(m *Sequence) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sequencerNextServer) Recv() (*Nucleotide, error) {
	m := new(Nucleotide)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Sequencer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sequencer.Sequencer",
	HandlerType: (*SequencerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Next",
			Handler:       _Sequencer_Next_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "sequencer.proto",
}
